# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(__file__)))
import grpclib.xrpc_pb2 as xrpc__pb2


class xrpc_serviceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.call = channel.unary_unary(
        '/top.xrpc_service/call',
        request_serializer=xrpc__pb2.xrpc_request.SerializeToString,
        response_deserializer=xrpc__pb2.xrpc_reply.FromString,
        )
    self.table_stream = channel.unary_stream(
        '/top.xrpc_service/table_stream',
        request_serializer=xrpc__pb2.xrpc_request.SerializeToString,
        response_deserializer=xrpc__pb2.xrpc_reply.FromString,
        )


class xrpc_serviceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def call(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def table_stream(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_xrpc_serviceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'call': grpc.unary_unary_rpc_method_handler(
          servicer.call,
          request_deserializer=xrpc__pb2.xrpc_request.FromString,
          response_serializer=xrpc__pb2.xrpc_reply.SerializeToString,
      ),
      'table_stream': grpc.unary_stream_rpc_method_handler(
          servicer.table_stream,
          request_deserializer=xrpc__pb2.xrpc_request.FromString,
          response_serializer=xrpc__pb2.xrpc_reply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'top.xrpc_service', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
